generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id               Int          @id @default(autoincrement())
  email            String       @unique
  nombre           String
  apellidoPaterno  String
  apellidoMaterno  String?
  passwordHash     String
  nivel            NivelUsuario @default(TECNICO)
  activo           Boolean      @default(true)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  reparaciones     Reparacion[]
  ticketsCreados   Ticket[]     @relation("TicketCreador")
  ticketsAsignados Ticket[]     @relation("TicketAsignado")
}

model Cliente {
  id               Int      @id @default(autoincrement())
  nombre           String
  apellidoPaterno  String
  apellidoMaterno  String?
  telefonoCelular  String
  telefonoContacto String?
  email            String   @unique
  calle            String
  numeroExterior   String
  numeroInterior   String?
  colonia          String
  ciudad           String
  estado           String
  codigoPostal     String
  latitud          Float?
  longitud         Float?
  fuenteReferencia String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  tickets          Ticket[]
}

model TipoServicio {
  id          Int      @id @default(autoincrement())
  concepto    String   @unique
  descripcion String?
  activo      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tickets     Ticket[]
}

model Marca {
  id        Int      @id @default(autoincrement())
  nombre    String   @unique
  logo      String?
  activo    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  modelos   Modelo[]
}

model Modelo {
  id              Int              @id @default(autoincrement())
  nombre          String
  descripcion     String?
  imagen          String?
  marcaId         Int
  activo          Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  marca           Marca            @relation(fields: [marcaId], references: [id])
  problemasModelo ProblemaModelo[]
  tickets         Ticket[]

  @@unique([nombre, marcaId])
}

model ProblemaFrecuente {
  id              Int              @id @default(autoincrement())
  descripcion     String
  solucion        String?
  activo          Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  problemasModelo ProblemaModelo[]
  ticketProblemas TicketProblema[]
}

model ProblemaModelo {
  id                  Int               @id @default(autoincrement())
  modeloId            Int
  problemaFrecuenteId Int
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  modelo              Modelo            @relation(fields: [modeloId], references: [id])
  problemaFrecuente   ProblemaFrecuente @relation(fields: [problemaFrecuenteId], references: [id])

  @@unique([modeloId, problemaFrecuenteId])
}

model EstatusReparacion {
  id          Int      @id @default(autoincrement())
  nombre      String   @unique
  descripcion String?
  orden       Int
  color       String?
  activo      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tickets     Ticket[]
}

model Pieza {
  id               Int               @id @default(autoincrement())
  nombre           String
  descripcion      String?
  cantidad         Int               @default(0)
  precioCompra     Float
  precioVenta      Float
  unidadMedida     String?
  ubicacion        String?
  activo           Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  piezasReparacion PiezaReparacion[]
}

model Ticket {
  id                  Int               @id @default(autoincrement())
  numeroTicket        String            @unique
  fechaRecepcion      DateTime          @default(now())
  clienteId           Int
  tipoServicioId      Int
  modeloId            Int
  descripcion         String?
  estatusReparacionId Int
  creadorId           Int
  tecnicoAsignadoId   Int?
  recogida            Boolean           @default(false)
  fechaEntrega        DateTime?
  entregado           Boolean           @default(false)
  cancelado           Boolean           @default(false)
  motivoCancelacion   String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  presupuesto         Presupuesto?
  reparacion          Reparacion?
  cliente             Cliente           @relation(fields: [clienteId], references: [id])
  creador             Usuario           @relation("TicketCreador", fields: [creadorId], references: [id])
  estatusReparacion   EstatusReparacion @relation(fields: [estatusReparacionId], references: [id])
  modelo              Modelo            @relation(fields: [modeloId], references: [id])
  tecnicoAsignado     Usuario?          @relation("TicketAsignado", fields: [tecnicoAsignadoId], references: [id])
  tipoServicio        TipoServicio      @relation(fields: [tipoServicioId], references: [id])
  ticketProblemas     TicketProblema[]
}

model TicketProblema {
  id                  Int               @id @default(autoincrement())
  ticketId            Int
  problemaFrecuenteId Int
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  problemaFrecuente   ProblemaFrecuente @relation(fields: [problemaFrecuenteId], references: [id])
  ticket              Ticket            @relation(fields: [ticketId], references: [id])

  @@unique([ticketId, problemaFrecuenteId])
}

model Reparacion {
  id                  Int               @id @default(autoincrement())
  ticketId            Int               @unique
  tecnicoId           Int
  diagnostico         String
  solucion            String?
  observaciones       String?
  fechaInicio         DateTime          @default(now())
  fechaFinalizacion   DateTime?
  fotosEvidencia      String[]
  videosEvidencia     String[]
  checklistCompletado Boolean           @default(false)
  garantiaDias        Int               @default(0)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  piezasUsadas        PiezaReparacion[]
  tecnico             Usuario           @relation(fields: [tecnicoId], references: [id])
  ticket              Ticket            @relation(fields: [ticketId], references: [id])
}

model PiezaReparacion {
  id             Int        @id @default(autoincrement())
  reparacionId   Int
  piezaId        Int
  cantidad       Int
  precioUnitario Float
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  pieza          Pieza      @relation(fields: [piezaId], references: [id])
  reparacion     Reparacion @relation(fields: [reparacionId], references: [id])

  @@unique([reparacionId, piezaId])
}

model Presupuesto {
  id              Int         @id @default(autoincrement())
  ticketId        Int         @unique
  manoDeObra      Float
  subtotal        Float
  iva             Float
  total           Float
  aprobado        Boolean     @default(false)
  fechaAprobacion DateTime?
  pagado          Boolean     @default(false)
  metodoPago      MetodoPago?
  comprobantePago String?
  fechaPago       DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  ticket          Ticket      @relation(fields: [ticketId], references: [id])
}

model Proveedor {
  id                  String   @id @default(cuid())
  tipo                String   // FISICA o MORAL
  nombre              String
  personaResponsable  String
  telefono            String
  email               String
  direccion           String
  rfc                 String   @unique
  banco               String
  cuentaBancaria      String
  clabeInterbancaria  String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

enum NivelUsuario {
  ADMINISTRADOR
  GERENTE
  TECNICO
  ATENCION_CLIENTE
}

enum MetodoPago {
  EFECTIVO
  TARJETA
  TRANSFERENCIA
  PAGO_ENTREGA
}
